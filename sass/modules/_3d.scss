$cube-side: 100px;
#cube,
#cube .side {
  @include centerItem($cube-side);

  border: 2px solid $gray;

  &:before,
  &:after {
    display: block;
    content: '';

    @include centerItem($cube-side);

    background-color: transparentize($red, 0.2);
    border: 2px solid $gray;
  }

  &:before {
    transform-origin: left;
    transform: rotateY(-90deg);

    -webkit-transform-origin: left;
    -webkit-transform: rotateY(-90deg);
  }

  &:after {
    transform-origin: top;
    transform: rotateX(90deg);

    -webkit-transform-origin: top;
    -webkit-transform: rotateX(90deg);
  }
  background-color: transparentize($red, 0.2);
}

#cube .side {
  transform: translateZ($cube-side) rotate(-90deg) rotateX(180deg);
  -webkit-transform: translateZ($cube-side) rotate(-90deg) rotateX(180deg);
}


#cube {
  transform: rotate(30deg);
  -webkit-transform: rotate(30deg);

  &:hover {
    animation: spinCube 2s 0s linear infinite;
    -webkit-animation: spinCube 2s 0s linear infinite;
  }
}


@keyframes spinCube {
  0% {
    // transform-origin: right;
    transform: rotate(0deg);
    -webkit-transform: rotate(0deg);
  }
  100% {
    // transform-origin: right;
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}


@-webkit-keyframes spinCube {
  0% {
    // transform-origin: right;
    transform: rotate(0deg);
    -webkit-transform: rotate(0deg);
  }
  100% {
    // transform-origin: right;
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}






$pyramid-side: 150px;
#pyramid {
  @include centerItem($pyramid-side);
  left: $pyramid-side;

  &:hover {
    animation: spinCube 2s 0s linear infinite;
    -webkit-animation: spinCube 2s 0s linear infinite;
  }


  $sides-nr: 3;
  $distance: $triangle-side / (2 * tan( pi() / $sides-nr));
  $angle: 360deg / $sides-nr;

  @for $x from 1 through $sides-nr {
    .triangle:nth-child(#{$x}) {
      transform: rotate($angle * $x) translateY(-$distance) rotateX(70.528779deg) rotate(60deg) skewX(30deg);
      -webkit-transform: rotate($angle * $x) translateY(-$distance) rotateX(70.528779deg) rotate(60deg) skewX(30deg);
    }
  }

  $triangle-side: $pyramid-side;
  .triangle {
    overflow: hidden;
    border-bottom: 2px solid $gray;
    border-right: 2px solid $gray;

    // romb
    @include centerItem($triangle-side, $triangle-side * sqrt(3)/2 );
    // transform: translateY(-$triangle-side/2) rotate(60deg) skewX(30deg);


    // triangle
    &:before {
      width: inherit;
      height: inherit;
      display: block;
      content: "";

      border: 2px solid $gray;

      background-color: transparentize($red, 0.2);

      transform: skewX(-30deg)
                  rotate(-60deg)
                  translateY(50%) rotate(0deg);

      -webkit-transform: skewX(-30deg)
                  rotate(-60deg)
                  translateY(50%) rotate(0deg);
    }
  }
}


$sphere-side: 150px;
$sphere-circles-nr: 16;
$sphere-angle: 360deg / $sphere-circles-nr;

#sphere {
  @include centerItem($sphere-side);
  margin-left: $sphere-side;

  &:hover {
    animation: spinCube 2s 0s linear infinite;
    -webkit-animation: spinCube 2s 0s linear infinite;
  }

  .circle {
    @include centerItem($sphere-side);

    border-radius: 50%;

    border: 2px solid $red;

    -webkit-transform: translateZ($sphere-side/2) rotateY(90deg);
    transform: translateZ($sphere-side/2) rotateY(90deg);
  }

  @for $x from 1 through $sphere-circles-nr {
    .circle:nth-child(#{$x}) {
      -webkit-transform: translateZ($sphere-side/2) rotateY(90deg) rotateX($sphere-angle * $x);
      transform: translateZ($sphere-side/2) rotateY(90deg) rotateX($sphere-angle * $x);
    }
  }
}


#anim-trigger:checked + .anim-trigger + #scene {
  #cube,
  #pyramid,
  #sphere {
    -webkit-animation: spinCube 2s 0s linear infinite;
    animation: spinCube 2s 0s linear infinite;
  }
}
