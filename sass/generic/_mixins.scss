/**
 * mixins.scss
 *
 * MB.com
 * @ 2014
 *
 * @author Mihnea Belcin
 */

/*------------------------------------*\
    $MIXINS
\*------------------------------------*/

/* CSS Transition
	Usage: @include transition(width,0.3s,ease-out);
 */
@mixin transition($transition-property, $transition-time, $method) {
	-webkit-transition: $transition-property $transition-time $method;
	-moz-transition: $transition-property $transition-time $method;
	-ms-transition: $transition-property $transition-time $method;
	-o-transition: $transition-property $transition-time $method;
	transition: $transition-property $transition-time $method;
}

/* Rem Unit font sizes with relative fallback http:/seesparkbox.com/foundry/scss_rem_mixin_now_with_a_better_fallback
	Usage: @include font-size(1, large);
*/
@mixin font-size( $decimal-size, $keyword: null ) {
  @if $keyword{ font-size: $keyword; }
  @else { font-size: $decimal-size * $base-font-multiplier * 16px;}
  font-size: $decimal-size * 1rem;
}


// RESPONSIVE
@mixin fromWidth($width) {
	@media only screen and (min-width: $width) { @content; }
}

@mixin toWidth($width) {
    @media only screen and (max-width: $width) { @content; }
}

@mixin mobile {
    @include toWidth($mediumWidth - 1px) { @content; };
}

@mixin tablet {
    @include fromWidth($mediumWidth) { @content; };
}

@mixin desktop {
    @include fromWidth($largeWidth) { @content; };
}

@mixin toDesktop {
    @include toWidth($largeWidth - 1px) { @content; };
}

@mixin huge {
    @include fromWidth($hugeWidth) { @content; };
}

@mixin forRetina() {
	@media (min--moz-device-pixel-ratio: 1.3),
		   (-o-min-device-pixel-ratio: 2.6/2),
		   (-webkit-min-device-pixel-ratio: 1.3),
		   (min-device-pixel-ratio: 1.3),
		   (min-resolution: 1.3dppx) {
			   	@content;
		   }
}




@mixin triangle($direction, $color, $sizeH, $sizeW) {
	@if $direction == "left" {
		border-bottom: $sizeH solid transparent;
		border-right: $sizeW solid $color;
		border-top: $sizeH solid transparent;
	}
	@else if $direction == "right" {
		border-bottom: $sizeH solid transparent;
		border-left: $sizeW solid $color;
		border-top: $sizeH solid transparent;
	}
	@else if $direction == "up" {
		border-bottom: $sizeW solid $color;
		border-left: $sizeH solid transparent;
		border-right: $sizeH solid transparent;
	}
	@else if $direction == "down" {
		border-right: $sizeH solid transparent;
		border-left: $sizeH solid transparent;
		border-top: $sizeW solid $color;
	}

	height: 0;
	width: 0;
}

$defaultPrefixes: webkit moz ms o;

@mixin prefixr($property, $value, $prefixes: $defaultPrefixes) {
    @each $prefix in $prefixes {
        -#{$prefix}-#{$property}: #{$value};
    }
    #{$property}: #{$value};
}


/*
    Ui images and hi-dpi management
-----------------------------------------------------------------------*/
@mixin hi-dpi {
    @media only screen and (-webkit-min-device-pixel-ratio: 1.3),
    only screen and (-o-min-device-pixel-ratio: 13/10),
    only screen and (min-resolution: 120dpi) {
        @content;
    }
}

@mixin ui-image($id, $mimetype: image/png) {

    // "inline-image" to base64 encode the image.
    background-image: inline-image("#{$id}.png", $mimetype);

    // "image-width" and "iamge-height" calculate the image dimentions.
    background-size: image-width("#{$id}.png") image-height("#{$id}.png");
    background-repeat: no-repeat;

    width: image-width("#{$id}.png");
    height: image-height("#{$id}.png");
    text-indent: -9000px;

    @include hi-dpi {
        // "inline-image" to base64 encode the @2x image.
        background-image: inline-image("#{$id}@2x.png", $mimetype);
    }
}



@mixin icon-image($id, $mimetype: image/png) {

    // "inline-image" to base64 encode the image.
    background-image: inline-image("#{$id}.png", $mimetype);

    // "image-width" and "iamge-height" calculate the image dimentions.
    background-size: 100%;
    background-repeat: no-repeat;

    text-indent: -9000px;
}


@mixin keyframes($animation-name){
	  @-webkit-keyframes $animation-name{
	    @content;
	  }

	  @-moz-keyframes $animation-name{
	    @content;
	  }

	  @-ms-keyframes $animation-name{
	    @content;
	  }

	  @keyframes $animation-name{
	    @content;
	  }
}


@mixin centerItem($w, $h: $w) {
    width: $w;
    height: $h;

    position: absolute;
    left: 50%;
    top: 50%;

    margin-left: -$w/2;
    margin-top: -$h/2
}


@mixin centerLeft($w, $h: $w) {
    width: $w;
    height: $h;

    position: absolute;
    left: 0;
    top: 50%;

    margin-top: -$h/2
}



@function photoshop-shadow($angle: 90, $distance: 0, $spread: 0, $size: 0, $color: #000, $inset: false) {
  $offset-x: round( cos($angle) * $distance);
  $offset-y: roung( sin($angel) * $distance);

  $spread: $size * ($spread/100);
  $blur: $size * $spread;

  $inset: if( $inset != false, 'inset', '');


  @return ( $offset-x $offset-y $blur $spread $color unquote($inset));
}



